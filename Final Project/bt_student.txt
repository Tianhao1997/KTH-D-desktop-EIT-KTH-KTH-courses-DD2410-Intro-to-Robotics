#!/usr/bin/env python

import py_trees as pt
import py_trees_ros as ptr
import rospy
from behaviours_student import *
from reactive_sequence import RSequence
from geometry_msgs.msg import PoseStamped, PoseWithCovarianceStamped
from std_srvs.srv import Empty, SetBool, SetBoolRequest


class BehaviourTree(ptr.trees.BehaviourTree):

    def __init__(self):

        rospy.loginfo("Initialising behaviour tree")

        # tuck arm
        b0 = tuckarm()

        # move head up
        b1 = movehead("up")

        # localize and navigate to pick goal
        b2 = pt.composites.Selector("Navigate pick/localize fallback")
        
        b2.add_children([navigate('/robotics_intro/poses_publisher/pick_pose_topic'), localize()])

        # move head down
        b3 = movehead("down")

        # detect cube
        b4 = detect_run()

        # pick up cube
        b5 = pickup()

        # move head up
        b6 = movehead("up")

        # localize and navigate to place goal
        b7 = pt.composites.Selector("Navigate pick/localize fallback")

        b7.add_children([navigate('/robotics_intro/poses_publisher/place_pose_topic'), localize()])

        # move head down
        b8 = movehead("down")

        # place cube
        b9 = place()

        # detect cube, possibly reset
        b10 = pt.composites.Selector("detect/go fallback")

        s0 = pt.composites.Selector("Move back fallback")

        s0.add_children([counter(12, "move back"), go("move back", -1, 0)])

        b10.add_children([detect_fail(20), s0])
    
        tree = RSequence(name="Main sequence", children=[b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10])

        super(BehaviourTree, self).__init__(tree)

        # execute the behaviour tree
        rospy.sleep(5)
        self.setup(timeout=10000)
        while not rospy.is_shutdown():
            self.tick_tock(1)


if __name__ == "__main__":

    rospy.init_node('main_state_machine')
    try:
        BehaviourTree()
    except rospy.ROSInterruptException:
        pass

    rospy.spin()